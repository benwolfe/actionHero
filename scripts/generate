#!/usr/bin/env node
// npm run-script actionHero generate

//////// REQUIRES ////////

var fs = require('fs');
var colors = require('colors');

//////// HELPERS ////////

var project_root = __dirname + "/../../../" // assumes node_modules/acionHero/scripts/generate

var dir_exists = function(dir, success_function, fail_function){
	try{
		var stats = fs.lstatSync(project_root + dir);
		if(stats.isDirectory() || stats.isSymbolicLink()){
			if(typeof success_function == 'function'){ success_function(); }
		}else{
			if(typeof fail_function == 'function'){ fail_function(); }
		}
	}catch(e){
		if(typeof fail_function == 'function'){ fail_function(); }
	}
}

var file_exists = function(file, success_function, fail_function){
	try{
		var stats = fs.lstatSync(project_root + file);
		if(stats.isFile() || stats.isSymbolicLink()){
			if(typeof success_function == 'function'){ success_function(); }
		}else{
			if(typeof fail_function == 'function'){ fail_function(); }
		}
	}catch(e){
		if(typeof fail_function == 'function'){ fail_function(); }
	}
}

var create_dir_safely = function(dir){
	var full_dir = project_root + dir;
	dir_exists(dir, function(){
		console.log(" - directory `"+prettify_path(full_dir)+"` already exists, skipping");
	}, function(){
		console.log(" - creating directory `"+prettify_path(full_dir)+"`");
		fs.mkdirSync(full_dir , 0766);
	});
}

var create_file_safely = function(file, data){
	var full_file = project_root + file;
	file_exists(file, function(){
		console.log(" - file `"+prettify_path(full_file)+"` already exists, skipping");
	}, function(){
		console.log(" - writing file `"+prettify_path(full_file)+"`");
		fs.writeFileSync(full_file, data);
	});
}

var prettify_path = function(full_path){
	var parts = full_path.split("/");
	var good_parts = [];
	for(var i in parts){
		var curr = parts[i];
		if(curr == ".."){
			good_parts.pop();
		}else{
			good_parts.push(curr);
		}
	}
	var resp = "";
	for(var i in good_parts){
		if(resp.length > 0){ resp = resp + "/"; }
		resp = resp + good_parts[i];
	}
	return resp;
}

//////// DOCUMENTS ////////

var documents = {};

documents.projectMap = "/\r\n\
|- actions\r\n\
|-- (your actions)\r\n\
|\r\n\
|- certs\r\n\
|-- (your https certs for your domain)\r\n\
|\r\n\
|- initializers\r\n\
|-- (any additional initializers you want)\r\n\
|\r\n\
|- log\r\n\
|-- (default location for logs)\r\n\
|\r\n\
|- node_modules\r\n\
|-- (your modules, actionHero should be npm installed in here)\r\n\
|\r\n\
|- public\r\n\
|-- (your static assets to be served by /file)\r\n\
|\r\n\
|- tasks\r\n\
|-- (your tasks)\r\n\
|\r\n\
| app.js\r\n\
| config.js\r\n\
| package.json (be sure to include 'actionHero':'x')\r\n\
";

documents.app_js = "// load in the actionHero class\r\n\
var actionHero = require('actionHero').actionHero;\r\n\
\r\n\
var params = {};\r\n\
// if there is no config.js file in the application's root, then actionHero will load in a collection of default params.  You can overwrite them with params.configChanges\r\n\
params.configChanges = {}\r\n\
\r\n\
// any additional functions you might wish to define to be globally accessable can be added as part of params.initFunction.  The api object will be availalbe.\r\n\
params.initFunction = function(api, next){\r\n\
	next();\r\n\
}\r\n\
\r\n\
// start the server!\r\n\
actionHero.start(params, function(api){\r\n\
	api.log('Boot Sucessful!');\r\n\
});\r\n\
";

documents.config_js = fs.readFileSync(project_root + "node_modules/actionHero/config.js");

documents.cert_pem = fs.readFileSync(project_root + "node_modules/actionHero/certs/server-cert.pem");
documents.key_pem = fs.readFileSync(project_root + "node_modules/actionHero/certs/server-key.pem");

documents.action_actions_view = fs.readFileSync(project_root + "node_modules/actionHero/actions/actionsView.js");
documents.action_file = fs.readFileSync(project_root + "node_modules/actionHero/actions/file.js");
documents.action_random_number = fs.readFileSync(project_root + "node_modules/actionHero/actions/randomNumber.js");
documents.action_status = fs.readFileSync(project_root + "node_modules/actionHero/actions/status.js");

documents.task_runAction = fs.readFileSync(project_root + "node_modules/actionHero/tasks/runAction.js");

documents.package_json = "{\r\n\
  \"author\": \"YOU <YOU@example.com>\",\r\n\
  \"name\": \"my_actionHero_project\",\r\n\
  \"description\": \"\",\r\n\
  \"version\": \"0.0.1\",\r\n\
  \"homepage\": \"\",\r\n\
  \"repository\": {\r\n\
  	\"type\": \"\",\r\n\
  	\"url\": \"\"\r\n\
  },\r\n\
  \"main\": \"app.js\",\r\n\
  \"keywords\": \"\",\r\n\
  \"engines\": {\r\n\
    \"node\": \">=0.6.0\"\r\n\
  },\r\n\
  \"dependencies\": {\r\n\
    \"actionHero\": \"x\"\r\n\
  },\r\n\
  \"devDependencies\": {},\r\n\
  \"scripts\": {\r\n\
    \"start\": \"node app.js\"\r\n\
  }\r\n\
}\r\n\
";

documents.index_html = "<h1>Hello from actionHero!</h1>\r\n\
<p>If you are reading this, your actionHero project is working.</p>\r\n\
<p><strong>Good Job!</strong></p>\r\n\
";

//////// LOGIC ////////

console.log("\r\n**********\r\n");
console.log("Generating a new actionHero project...");

// test that actionHero is installed
dir_exists("node_modules", null, function(){
	console.log(" ! node_modules doesn't exist.  `npm install actionHero` first".red);
	process.exit();
});
dir_exists("node_modules/actionHero", null, function(){
	console.log(" ! node_modules/actionHero doesn't exist.  `npm install actionHero` first".red);
	process.exit();
});

// make directories
create_dir_safely("actions");
create_dir_safely("certs");
create_dir_safely("initializers");
create_dir_safely("log");
create_dir_safely("public");
create_dir_safely("tasks");

// make files
create_file_safely('app.js', documents.app_js);
create_file_safely('config.js', documents.config_js);
create_file_safely('package.json', documents.package_json);
create_file_safely('/certs/server-cert.pem', documents.cert_pem);
create_file_safely('/certs/server-key.pem', documents.key_pem);
create_file_safely('/actions/actionsView.js', documents.action_actions_view);
create_file_safely('/actions/file.js', documents.action_file);
create_file_safely('/actions/randomNumber.js', documents.action_random_number);
create_file_safely('/actions/status.js', documents.action_status);
create_file_safely('/tasks/runAction.js', documents.task_runAction);
create_file_safely('/public/index.html', documents.index_html);

console.log("");
console.log("Generation Complete.  Your project directory should look like this:");
console.log(documents.projectMap.blue)

console.log("\r\n**********\r\n");